prompts:
  # ------------------- Generic (25) -------------------
  - id: 1
    text: "Practice makes progress, not perfection."
    difficulty: easy
    Type: Generic
  - id: 2
    text: "The stars shine brightest in the darkest night."
    difficulty: easy
    Type: Generic
  - id: 3
    text: "Patience is bitter, but its fruit is sweet."
    difficulty: medium
    Type: Generic
  - id: 4
    text: "A journey of a thousand miles begins with a single step."
    difficulty: medium
    Type: Generic
  - id: 5
    text: "Wisdom comes not from age, but from learning."
    difficulty: medium
    Type: Generic
  - id: 6
    text: "Silence is sometimes the best answer."
    difficulty: easy
    Type: Generic
  - id: 7
    text: "Knowledge without action is meaningless."
    difficulty: medium
    Type: Generic
  - id: 8
    text: "Hard work beats talent when talent doesn’t work hard."
    difficulty: hard
    Type: Generic
  - id: 9
    text: "The early bird catches the worm, but the second mouse gets the cheese."
    difficulty: medium
    Type: Generic
  - id: 10
    text: "Do not go where the path may lead, go instead where there is no path and leave a trail."
    difficulty: hard
    Type: Generic
  - id: 11
    text: "Happiness is not something ready made; it comes from your own actions."
    difficulty: medium
    Type: Generic
  - id: 12
    text: "Courage is grace under pressure."
    difficulty: medium
    Type: Generic
  - id: 13
    text: "The best way to predict the future is to create it."
    difficulty: hard
    Type: Generic
  - id: 14
    text: "Small deeds done are better than great deeds planned."
    difficulty: medium
    Type: Generic
  - id: 15
    text: "You cannot step into the same river twice."
    difficulty: hard
    Type: Generic
  - id: 16
    text: "Dreams don’t work unless you do."
    difficulty: easy
    Type: Generic
  - id: 17
    text: "Great minds discuss ideas; average minds discuss events; small minds discuss people."
    difficulty: hard
    Type: Generic
  - id: 18
    text: "Opportunities don’t happen, you create them."
    difficulty: medium
    Type: Generic
  - id: 19
    text: "Fall seven times and stand up eight."
    difficulty: easy
    Type: Generic
  - id: 20
    text: "Do not let making a living prevent you from making a life."
    difficulty: medium
    Type: Generic
  - id: 21
    text: "A diamond is a piece of coal that did well under pressure."
    difficulty: hard
    Type: Generic
  - id: 22
    text: "What you get by achieving your goals is not as important as what you become by achieving your goals."
    difficulty: hard
    Type: Generic
  - id: 23
    text: "Change is the only constant in life."
    difficulty: easy
    Type: Generic
  - id: 24
    text: "Success is stumbling from failure to failure with no loss of enthusiasm."
    difficulty: medium
    Type: Generic
  - id: 25
    text: "The mind is everything; what you think you become."
    difficulty: medium
    Type: Generic

  # ------------------- Golang (15) -------------------
  - id: 26
    text: "for i := 0; i < 10; i++ { fmt.Println(i) }"
    difficulty: easy
    Type: Golang
  - id: 27
    text: "if err != nil { log.Fatal(err) }"
    difficulty: easy
    Type: Golang
  - id: 28
    text: "numbers := []int{1,2,3,4,5}"
    difficulty: easy
    Type: Golang
  - id: 29
    text: "m := map[string]int{\"a\":1,\"b\":2}"
    difficulty: medium
    Type: Golang
  - id: 30
    text: "go func(){ ch <- 42 }()"
    difficulty: medium
    Type: Golang
  - id: 31
    text: "select { case v := <-ch: fmt.Println(v) default: fmt.Println(\"none\") }"
    difficulty: hard
    Type: Golang
  - id: 32
    text: "type Person struct { Name string Age int }"
    difficulty: medium
    Type: Golang
  - id: 33
    text: "func add(a int,b int) int { return a+b }"
    difficulty: easy
    Type: Golang
  - id: 34
    text: "defer file.Close()"
    difficulty: easy
    Type: Golang
  - id: 35
    text: "json.NewEncoder(w).Encode(data)"
    difficulty: medium
    Type: Golang
  - id: 36
    text: "mutex.Lock(); counter++; mutex.Unlock()"
    difficulty: hard
    Type: Golang
  - id: 37
    text: "ctx,cancel := context.WithTimeout(context.Background(),time.Second)"
    difficulty: hard
    Type: Golang
  - id: 38
    text: "http.HandleFunc(\"/\", func(w http.ResponseWriter,r *http.Request){ fmt.Fprint(w,\"hi\") })"
    difficulty: hard
    Type: Golang
  - id: 39
    text: "f,err := os.Open(\"file.txt\")"
    difficulty: medium
    Type: Golang
  - id: 40
    text: "strings.Join([]string{\"go\",\"lang\"},\"-\")"
    difficulty: medium
    Type: Golang

  # ------------------- Python (15) -------------------
  - id: 41
    text: "for i in range(10): print(i)"
    difficulty: easy
    Type: Python
  - id: 42
    text: "if x is None: raise ValueError(\"x cannot be None\")"
    difficulty: easy
    Type: Python
  - id: 43
    text: "nums = [1,2,3,4,5]"
    difficulty: easy
    Type: Python
  - id: 44
    text: "squares = [x*x for x in range(10)]"
    difficulty: medium
    Type: Python
  - id: 45
    text: "with open(\"file.txt\") as f: data = f.read()"
    difficulty: medium
    Type: Python
  - id: 46
    text: "import json; json.dumps({\"a\":1,\"b\":2})"
    difficulty: medium
    Type: Python
  - id: 47
    text: "try: risky() except Exception as e: print(e)"
    difficulty: medium
    Type: Python
  - id: 48
    text: "def add(a,b): return a+b"
    difficulty: easy
    Type: Python
  - id: 49
    text: "class Person: def __init__(self,name,age): self.name=name; self.age=age"
    difficulty: hard
    Type: Python
  - id: 50
    text: "lambda x: x*2"
    difficulty: easy
    Type: Python
  - id: 51
    text: "dict(zip(keys,values))"
    difficulty: medium
    Type: Python
  - id: 52
    text: "from collections import Counter; Counter(words)"
    difficulty: medium
    Type: Python
  - id: 53
    text: "async def main(): await do_task()"
    difficulty: hard
    Type: Python
  - id: 54
    text: "import asyncio; asyncio.run(main())"
    difficulty: hard
    Type: Python
  - id: 55
    text: "sorted(data,key=lambda x: x[1])"
    difficulty: hard
    Type: Python

  # ------------------- Java (15) -------------------
  - id: 56
    text: "for(int i=0;i<10;i++){System.out.println(i);}"
    difficulty: easy
    Type: Java
  - id: 57
    text: "if(str==null){throw new IllegalArgumentException();}"
    difficulty: easy
    Type: Java
  - id: 58
    text: "int[] arr = {1,2,3,4,5};"
    difficulty: easy
    Type: Java
  - id: 59
    text: "List<String> list = Arrays.asList(\"a\",\"b\");"
    difficulty: medium
    Type: Java
  - id: 60
    text: "Map<String,Integer> map = new HashMap<>();"
    difficulty: medium
    Type: Java
  - id: 61
    text: "try{ risky(); }catch(Exception e){ e.printStackTrace(); }"
    difficulty: medium
    Type: Java
  - id: 62
    text: "class Person{ String name; int age; Person(String n,int a){ name=n; age=a; }}"
    difficulty: hard
    Type: Java
  - id: 63
    text: "public static int add(int a,int b){ return a+b; }"
    difficulty: easy
    Type: Java
  - id: 64
    text: "File f = new File(\"file.txt\");"
    difficulty: medium
    Type: Java
  - id: 65
    text: "Optional<String> opt = Optional.of(\"hi\");"
    difficulty: medium
    Type: Java
  - id: 66
    text: "Stream.of(1,2,3).map(x->x*2).forEach(System.out::println);"
    difficulty: hard
    Type: Java
  - id: 67
    text: "synchronized(lock){ counter++; }"
    difficulty: hard
    Type: Java
  - id: 68
    text: "CompletableFuture.runAsync(()->task());"
    difficulty: hard
    Type: Java
  - id: 69
    text: "System.out.println(String.join(\"-\",list));"
    difficulty: medium
    Type: Java
  - id: 70
    text: "Integer.parseInt(\"123\");"
    difficulty: easy
    Type: Java

  # ------------------- C++ (15) -------------------
  - id: 71
    text: "for(int i=0;i<10;i++){std::cout<<i<<std::endl;}"
    difficulty: easy
    Type: C++
  - id: 72
    text: "if(ptr==nullptr){throw std::runtime_error(\"null\");}"
    difficulty: easy
    Type: C++
  - id: 73
    text: "std::vector<int> v = {1,2,3,4,5};"
    difficulty: easy
    Type: C++
  - id: 74
    text: "std::map<std::string,int> m = {{\"a\",1},{\"b\",2}};"
    difficulty: medium
    Type: C++
  - id: 75
    text: "try{ risky(); }catch(const std::exception& e){ std::cerr<<e.what(); }"
    difficulty: medium
    Type: C++
  - id: 76
    text: "class Person{ public: std::string name; int age; Person(std::string n,int a):name(n),age(a){} };"
    difficulty: hard
    Type: C++
  - id: 77
    text: "int add(int a,int b){ return a+b; }"
    difficulty: easy
    Type: C++
  - id: 78
    text: "std::unique_ptr<int> p = std::make_unique<int>(5);"
    difficulty: medium
    Type: C++
  - id: 79
    text: "auto it = std::find(v.begin(),v.end(),3);"
    difficulty: medium
    Type: C++
  - id: 80
    text: "std::sort(v.begin(),v.end(),[](int a,int b){ return a<b; });"
    difficulty: hard
    Type: C++
  - id: 81
    text: "std::thread t([](){ std::cout<<\"hi\"; }); t.join();"
    difficulty: hard
    Type: C++
  - id: 82
    text: "std::lock_guard<std::mutex> guard(mtx); counter++;"
    difficulty: hard
    Type: C++
  - id: 83
    text: "std::string s = std::to_string(42);"
    difficulty: easy
    Type: C++
  - id: 84
    text: "for(auto& x:v){ x*=2; }"
    difficulty: medium
    Type: C++
  - id: 85
    text: "std::chrono::milliseconds ms(1000);"
    difficulty: medium
    Type: C++

