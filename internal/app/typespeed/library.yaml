prompts:
  # ------------------- standard (25) -------------------
  - id: 1
    text: "Practice makes progress, not perfection."
    difficulty: easy
    type: standard
  - id: 2
    text: "The stars shine brightest in the darkest night."
    difficulty: easy
    type: standard
  - id: 3
    text: "Patience is bitter, but its fruit is sweet."
    difficulty: medium
    type: standard
  - id: 4
    text: "A journey of a thousand miles begins with a single step."
    difficulty: medium
    type: standard
  - id: 5
    text: "Wisdom comes not from age, but from learning."
    difficulty: medium
    type: standard
  - id: 6
    text: "Silence is sometimes the best answer."
    difficulty: easy
    type: standard
  - id: 7
    text: "Knowledge without action is meaningless."
    difficulty: medium
    type: standard
  - id: 8
    text: "Hard work beats talent when talent doesn't work hard."
    difficulty: hard
    type: standard
  - id: 9
    text: "The early bird catches the worm, but the second mouse gets the cheese."
    difficulty: medium
    type: standard
  - id: 10
    text: "Do not go where the path may lead, go instead where there is no path and leave a trail."
    difficulty: hard
    type: standard
  - id: 11
    text: "Happiness is not something ready made; it comes from your own actions."
    difficulty: medium
    type: standard
  - id: 12
    text: "Courage is grace under pressure."
    difficulty: medium
    type: standard
  - id: 13
    text: "The best way to predict the future is to create it."
    difficulty: hard
    type: standard
  - id: 14
    text: "Small deeds done are better than great deeds planned."
    difficulty: medium
    type: standard
  - id: 15
    text: "You cannot step into the same river twice."
    difficulty: hard
    type: standard
  - id: 16
    text: "Dreams don't work unless you do."
    difficulty: easy
    type: standard
  - id: 17
    text: "Great minds discuss ideas; average minds discuss events; small minds discuss people."
    difficulty: hard
    type: standard
  - id: 18
    text: "Opportunities don't happen, you create them."
    difficulty: medium
    type: standard
  - id: 19
    text: "Fall seven times and stand up eight."
    difficulty: easy
    type: standard
  - id: 20
    text: "Do not let making a living prevent you from making a life."
    difficulty: medium
    type: standard
  - id: 21
    text: "A diamond is a piece of coal that did well under pressure."
    difficulty: hard
    type: standard
  - id: 22
    text: "What you get by achieving your goals is not as important as what you become by achieving your goals."
    difficulty: hard
    type: standard
  - id: 23
    text: "Change is the only constant in life."
    difficulty: easy
    type: standard
  - id: 24
    text: "Success is stumbling from failure to failure with no loss of enthusiasm."
    difficulty: medium
    type: standard
  - id: 25
    text: "The mind is everything; what you think you become."
    difficulty: medium
    type: standard

  # ------------------- golang (15) -------------------
  - id: 26
    text: "for i := 0; i < 10; i++ { fmt.Println(i) }"
    difficulty: easy
    type: golang
  - id: 27
    text: "if err != nil { log.Fatal(err) }"
    difficulty: easy
    type: golang
  - id: 28
    text: "numbers := []int{1,2,3,4,5}"
    difficulty: easy
    type: golang
  - id: 29
    text: "m := map[string]int{\"a\":1,\"b\":2}"
    difficulty: medium
    type: golang
  - id: 30
    text: "go func(){ ch <- 42 }()"
    difficulty: medium
    type: golang
  - id: 31
    text: "select { case v := <-ch: fmt.Println(v) default: fmt.Println(\"none\") }"
    difficulty: hard
    type: golang
  - id: 32
    text: "type Person struct { Name string Age int }"
    difficulty: medium
    type: golang
  - id: 33
    text: "func add(a int,b int) int { return a+b }"
    difficulty: easy
    type: golang
  - id: 34
    text: "defer file.Close()"
    difficulty: easy
    type: golang
  - id: 35
    text: "json.NewEncoder(w).Encode(data)"
    difficulty: medium
    type: golang
  - id: 36
    text: "mutex.Lock(); counter++; mutex.Unlock()"
    difficulty: hard
    type: golang
  - id: 37
    text: "ctx,cancel := context.WithTimeout(context.Background(),time.Second)"
    difficulty: hard
    type: golang
  - id: 38
    text: "http.HandleFunc(\"/\", func(w http.ResponseWriter,r *http.Request){ fmt.Fprint(w,\"hi\") })"
    difficulty: hard
    type: golang
  - id: 39
    text: "f,err := os.Open(\"file.txt\")"
    difficulty: medium
    type: golang
  - id: 40
    text: "strings.Join([]string{\"go\",\"lang\"},\"-\")"
    difficulty: medium
    type: golang

  # ------------------- python (15) -------------------
  - id: 41
    text: "for i in range(10): print(i)"
    difficulty: easy
    type: python
  - id: 42
    text: "if x is None: raise ValueError(\"x cannot be None\")"
    difficulty: easy
    type: python
  - id: 43
    text: "nums = [1,2,3,4,5]"
    difficulty: easy
    type: python
  - id: 44
    text: "squares = [x*x for x in range(10)]"
    difficulty: medium
    type: python
  - id: 45
    text: "with open(\"file.txt\") as f: data = f.read()"
    difficulty: medium
    type: python
  - id: 46
    text: "import json; json.dumps({\"a\":1,\"b\":2})"
    difficulty: medium
    type: python
  - id: 47
    text: "try: risky() except Exception as e: print(e)"
    difficulty: medium
    type: python
  - id: 48
    text: "def add(a,b): return a+b"
    difficulty: easy
    type: python
  - id: 49
    text: "class Person: def __init__(self,name,age): self.name=name; self.age=age"
    difficulty: hard
    type: python
  - id: 50
    text: "lambda x: x*2"
    difficulty: easy
    type: python
  - id: 51
    text: "dict(zip(keys,values))"
    difficulty: medium
    type: python
  - id: 52
    text: "from collections import Counter; Counter(words)"
    difficulty: medium
    type: python
  - id: 53
    text: "async def main(): await do_task()"
    difficulty: hard
    type: python
  - id: 54
    text: "import asyncio; asyncio.run(main())"
    difficulty: hard
    type: python
  - id: 55
    text: "sorted(data,key=lambda x: x[1])"
    difficulty: hard
    type: python

  # ------------------- java (15) -------------------
  - id: 56
    text: "for(int i=0;i<10;i++){System.out.println(i);}"
    difficulty: easy
    type: java
  - id: 57
    text: "if(str==null){throw new IllegalArgumentException();}"
    difficulty: easy
    type: java
  - id: 58
    text: "int[] arr = {1,2,3,4,5};"
    difficulty: easy
    type: java
  - id: 59
    text: "List<String> list = Arrays.asList(\"a\",\"b\");"
    difficulty: medium
    type: java
  - id: 60
    text: "Map<String,Integer> map = new HashMap<>();"
    difficulty: medium
    type: java
  - id: 61
    text: "try{ risky(); }catch(Exception e){ e.printStackTrace(); }"
    difficulty: medium
    type: java
  - id: 62
    text: "class Person{ String name; int age; Person(String n,int a){ name=n; age=a; }}"
    difficulty: hard
    type: java
  - id: 63
    text: "public static int add(int a,int b){ return a+b; }"
    difficulty: easy
    type: java
  - id: 64
    text: "File f = new File(\"file.txt\");"
    difficulty: medium
    type: java
  - id: 65
    text: "Optional<String> opt = Optional.of(\"hi\");"
    difficulty: medium
    type: java
  - id: 66
    text: "Stream.of(1,2,3).map(x->x*2).forEach(System.out::println);"
    difficulty: hard
    type: java
  - id: 67
    text: "synchronized(lock){ counter++; }"
    difficulty: hard
    type: java
  - id: 68
    text: "CompletableFuture.runAsync(()->task());"
    difficulty: hard
    type: java
  - id: 69
    text: "System.out.println(String.join(\"-\",list));"
    difficulty: medium
    type: java
  - id: 70
    text: "Integer.parseInt(\"123\");"
    difficulty: easy
    type: java

  # ------------------- c++ (15) -------------------
  - id: 71
    text: "for(int i=0;i<10;i++){std::cout<<i<<std::endl;}"
    difficulty: easy
    type: c++
  - id: 72
    text: "if(ptr==nullptr){throw std::runtime_error(\"null\");}"
    difficulty: easy
    type: c++
  - id: 73
    text: "std::vector<int> v = {1,2,3,4,5};"
    difficulty: easy
    type: c++
  - id: 74
    text: "std::map<std::string,int> m = {{\"a\",1},{\"b\",2}};"
    difficulty: medium
    type: c++
  - id: 75
    text: "try{ risky(); }catch(const std::exception& e){ std::cerr<<e.what(); }"
    difficulty: medium
    type: c++
  - id: 76
    text: "class Person{ public: std::string name; int age; Person(std::string n,int a):name(n),age(a){} };"
    difficulty: hard
    type: c++
  - id: 77
    text: "int add(int a,int b){ return a+b; }"
    difficulty: easy
    type: c++
  - id: 78
    text: "std::unique_ptr<int> p = std::make_unique<int>(5);"
    difficulty: medium
    type: c++
  - id: 79
    text: "auto it = std::find(v.begin(),v.end(),3);"
    difficulty: medium
    type: c++
  - id: 80
    text: "std::sort(v.begin(),v.end(),[](int a,int b){ return a<b; });"
    difficulty: hard
    type: c++
  - id: 81
    text: "std::thread t([](){ std::cout<<\"hi\"; }); t.join();"
    difficulty: hard
    type: c++
  - id: 82
    text: "std::lock_guard<std::mutex> guard(mtx); counter++;"
    difficulty: hard
    type: c++
  - id: 83
    text: "std::string s = std::to_string(42);"
    difficulty: easy
    type: c++
  - id: 84
    text: "for(auto& x:v){ x*=2; }"
    difficulty: medium
    type: c++
  - id: 85
    text: "std::chrono::milliseconds ms(1000);"
    difficulty: medium
    type: c++
  # ------------------- standard (10 more) -------------------
  - id: 86
    text: "Do what you can, with what you have, where you are."
    difficulty: easy
    type: standard
  - id: 87
    text: "It always seems impossible until it's done."
    difficulty: medium
    type: standard
  - id: 88
    text: "Act as if what you do makes a difference. It does."
    difficulty: medium
    type: standard
  - id: 89
    text: "Your limitationâ€”it's only your imagination."
    difficulty: easy
    type: standard
  - id: 90
    text: "Great things never come from comfort zones."
    difficulty: medium
    type: standard
  - id: 91
    text: "The harder you work for something, the greater you'll feel when you achieve it."
    difficulty: hard
    type: standard
  - id: 92
    text: "Don't watch the clock; do what it does. Keep going."
    difficulty: medium
    type: standard
  - id: 93
    text: "Dream big and dare to fail."
    difficulty: easy
    type: standard
  - id: 94
    text: "Success usually comes to those who are too busy to be looking for it."
    difficulty: hard
    type: standard
  - id: 95
    text: "The secret of getting ahead is getting started."
    difficulty: easy
    type: standard

  # ------------------- golang (10 more) -------------------
  - id: 96
    text: "var x int = 10"
    difficulty: easy
    type: golang
  - id: 97
    text: "ch := make(chan int)"
    difficulty: medium
    type: golang
  - id: 98
    text: "defer func(){ fmt.Println(\"done\") }()"
    difficulty: medium
    type: golang
  - id: 99
    text: "func factorial(n int) int { if n==0 {return 1} return n*factorial(n-1) }"
    difficulty: hard
    type: golang
  - id: 100
    text: "var wg sync.WaitGroup; wg.Add(1); go func(){ defer wg.Done() }(); wg.Wait()"
    difficulty: hard
    type: golang
  - id: 101
    text: "strings.Contains(\"hello\",\"he\")"
    difficulty: easy
    type: golang
  - id: 102
    text: "math.Sqrt(16)"
    difficulty: easy
    type: golang
  - id: 103
    text: "ioutil.ReadFile(\"file.txt\")"
    difficulty: medium
    type: golang
  - id: 104
    text: "type Employee struct { Name string; Salary int }"
    difficulty: medium
    type: golang
  - id: 105
    text: "panic(\"something went wrong\")"
    difficulty: hard
    type: golang

  # ------------------- python (10 more) -------------------
  - id: 106
    text: "for i, val in enumerate(nums): print(i,val)"
    difficulty: easy
    type: python
  - id: 107
    text: "x = {}"
    difficulty: easy
    type: python
  - id: 108
    text: "def factorial(n): return 1 if n==0 else n*factorial(n-1)"
    difficulty: medium
    type: python
  - id: 109
    text: "import math; math.sqrt(16)"
    difficulty: easy
    type: python
  - id: 110
    text: "with open('file.txt','w') as f: f.write('hello')"
    difficulty: medium
    type: python
  - id: 111
    text: "from collections import defaultdict; d = defaultdict(int)"
    difficulty: medium
    type: python
  - id: 112
    text: "class Employee: def __init__(self,name,salary): self.name=name; self.salary=salary"
    difficulty: hard
    type: python
  - id: 113
    text: "import asyncio; await asyncio.sleep(1)"
    difficulty: hard
    type: python
  - id: 114
    text: "list(filter(lambda x:x%2==0,nums))"
    difficulty: medium
    type: python
  - id: 115
    text: "x = [i*2 for i in range(5)]"
    difficulty: easy
    type: python

  # ------------------- java (10 more) -------------------
  - id: 116
    text: "int sum(int a,int b){ return a+b; }"
    difficulty: easy
    type: java
  - id: 117
    text: "List<Integer> nums = new ArrayList<>();"
    difficulty: medium
    type: java
  - id: 118
    text: "try(FileReader fr=new FileReader(\"file.txt\")){ }"
    difficulty: medium
    type: java
  - id: 119
    text: "Stream.generate(()->Math.random()).limit(5).forEach(System.out::println);"
    difficulty: hard
    type: java
  - id: 120
    text: "synchronized(this){ doSomething(); }"
    difficulty: hard
    type: java
  - id: 121
    text: "Optional<Integer> val = Optional.ofNullable(null);"
    difficulty: medium
    type: java
  - id: 122
    text: "int factorial(int n){ return n==0?1:n*factorial(n-1); }"
    difficulty: medium
    type: java
  - id: 123
    text: "CompletableFuture<Integer> cf = CompletableFuture.supplyAsync(()->42);"
    difficulty: hard
    type: java
  - id: 124
    text: "String s = String.format(\"Hello %s\", name);"
    difficulty: easy
    type: java
  - id: 125
    text: "Map<String,List<Integer>> map = new HashMap<>();"
    difficulty: medium
    type: java

  # ------------------- c++ (10 more) -------------------
  - id: 126
    text: "std::vector<int> squares; for(int i=0;i<10;i++){ squares.push_back(i*i); }"
    difficulty: medium
    type: c++
  - id: 127
    text: "std::unique_ptr<int> p = std::make_unique<int>(10);"
    difficulty: medium
    type: c++
  - id: 128
    text: "std::thread t([](){ std::cout<<\"thread\"; }); t.join();"
    difficulty: hard
    type: c++
  - id: 129
    text: "std::lock_guard<std::mutex> g(mtx); counter++;"
    difficulty: hard
    type: c++
  - id: 130
    text: "int factorial(int n){ return n==0?1:n*factorial(n-1); }"
    difficulty: medium
    type: c++
  - id: 131
    text: "std::ifstream file(\"file.txt\");"
    difficulty: easy
    type: c++
  - id: 132
    text: "auto max_it = std::max_element(v.begin(),v.end());"
    difficulty: medium
    type: c++
  - id: 133
    text: "std::vector<int> nums={1,2,3,4}; std::reverse(nums.begin(),nums.end());"
    difficulty: medium
    type: c++
  - id: 134
    text: "class Employee{ public: std::string name; int salary; Employee(std::string n,int s):name(n),salary(s){} };"
    difficulty: hard
    type: c++
  - id: 135
    text: "std::chrono::seconds sec(5);"
    difficulty: medium
    type: c++

  # ------------------- rust (15) -------------------
  - id: 136
    text: "let mut v = vec![1,2,3]; v.push(4);"
    difficulty: easy
    type: rust
  - id: 137
    text: "let x: Result<i32,&str> = Ok(5);"
    difficulty: medium
    type: rust
  - id: 138
    text: "fn factorial(n:u32)->u32 { if n==0 {1} else {n*factorial(n-1)} }"
    difficulty: medium
    type: rust
  - id: 139
    text: "let s = String::from(\"hello world\"); println!(\"{}\", s);"
    difficulty: easy
    type: rust
  - id: 140
    text: "use std::collections::HashSet; let mut set = HashSet::new(); set.insert(1);"
    difficulty: medium
    type: rust
  - id: 141
    text: "let handle = std::thread::spawn(|| println!(\"thread\")); handle.join().unwrap();"
    difficulty: hard
    type: rust
  - id: 142
    text: "let x = Some(42); if let Some(v) = x { println!(\"{}\", v); }"
    difficulty: medium
    type: rust
  - id: 143
    text: "let joined = [\"rust\",\"lang\"].join(\"-\");"
    difficulty: medium
    type: rust
  - id: 144
    text: "async fn run() { do_task().await; }"
    difficulty: hard
    type: rust
  - id: 145
    text: "let sorted: Vec<_> = v.iter().sorted().collect();"
    difficulty: hard
    type: rust
  - id: 146
    text: "let mut counter = 0; let mtx = std::sync::Mutex::new(&mut counter);"
    difficulty: hard
    type: rust
  - id: 147
    text: "let squared: Vec<i32> = v.iter().map(|x| x*x).collect();"
    difficulty: medium
    type: rust
  - id: 148
    text: "use std::fs; let content = fs::read_to_string(\"file.txt\").unwrap();"
    difficulty: medium
    type: rust
  - id: 149
    text: "let mut map = std::collections::HashMap::new(); map.insert(\"key\", 42);"
    difficulty: medium
    type: rust
  - id: 150
    text: "match x { Ok(v)=>println!(\"{}\",v), Err(e)=>println!(\"error\") }"
    difficulty: medium
    type: rust

